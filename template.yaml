AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: home-page

Parameters:
  CertificateId:
    Type: String
    Description: AWS Certificate ID
  Stage:
    Type: String
    Description: The Stage where the application is running in, e.g., dev, prod.

Conditions:
  IsProduction: !Equals
    - !Ref Stage
    - prod

Globals:
  Function:
    Timeout: 5
    Handler: index.handler
    Runtime: nodejs22.x
    Environment:
      Variables:
        RSS_TABLE: !Ref RssTable

Resources:
  RssTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "entityType"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "entityType"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  ScrapeRssFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/scraper
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
              Resource:
                - !GetAtt RssTable.Arn
      Events:
        ComplexScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: rate(1 day)
            FlexibleTimeWindow:
              Mode: FLEXIBLE
              MaximumWindowInMinutes: 5
            StartDate: "2025-08-15T12:00:00.000Z"
            EndDate: "2025-08-16T12:00:00.000Z"
            ScheduleExpressionTimezone: UTC
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true # Optional: minify the output JavaScript
        Target: es2020 # Optional: specify target JavaScript version

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      
  ApiListRssFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ListRssFeeds
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt RssTable.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020

  ApiGetRssFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/GetRssFeeds
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt RssTable.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{id}
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true # Optional: minify the output JavaScript
        Target: es2020 # Optional: specify target JavaScript version

  S3Bucket:
    Type: AWS::S3::Bucket
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          - Effect: Allow
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Serverless website OA"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If
            - IsProduction
            - !Sub "home.bilensky.ca"
            - !Ref "AWS::NoValue"
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: "sni-only"
          AcmCertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CertificateId}
          MinimumProtocolVersion: "TLSv1.2_2019"

Outputs:
  S3Bucket:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
  RssTable:
    Description: RssTable Name
    Value: !Ref RssTable
  CloudFrontDisribution:
    Description: CloudFront Distibution Id
    Value: !Ref CloudFrontDistribution
  CloudFrontDomain:
    Description: CloudFront Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
